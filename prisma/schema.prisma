generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auction {
  id          BigInt    @id @default(autoincrement())
  category_id BigInt?
  status_id   Int?
  start_time  DateTime  @db.Timestamp(6)
  finish_time DateTime  @db.Timestamp(6)
  is_deleted  Boolean
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  category    category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  status      status?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  bid_list    bid[]
  photo_list  photo[]
}

model bid {
  id                   BigInt   @id @default(autoincrement())
  auction_id           BigInt?
  user_id              BigInt?
  amount               Decimal  @db.Decimal(15, 2)
  provision_id_on_bank BigInt?  @unique
  auction              auction? @relation(fields: [auction_id], references: [id], onUpdate: NoAction)
  user                 user?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model category {
  id           BigInt    @id @default(autoincrement())
  name         String    @unique @db.VarChar(100)
  status_id    Int?
  address      String    @db.VarChar(255)
  location_id  BigInt?
  valid_radius Decimal   @db.Decimal(10, 1)
  is_deleted   Boolean
  created_at   DateTime  @db.Timestamp(6)
  updated_at   DateTime  @db.Timestamp(6)
  auction_list auction[]
  location     location? @relation(fields: [location_id], references: [id], onUpdate: NoAction)
  status       status?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  photo_list   photo[]
}

model location {
  id            BigInt     @id @default(autoincrement())
  latitude      String     @db.VarChar(100)
  longitude     String     @db.VarChar(100)
  category_list category[]
  photo_list    photo[]
}

model photo {
  id          BigInt    @id @default(autoincrement())
  file_path   String?   @db.VarChar(100)
  title       String?   @db.VarChar(100)
  user_id     BigInt?
  auction_id  BigInt?
  location_id BigInt?
  category_id BigInt?
  status_id   Int?
  device_info String    @db.VarChar(255)
  vote_count  Int
  is_deleted  Boolean
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  auction     auction?  @relation(fields: [auction_id], references: [id], onUpdate: NoAction)
  category    category? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  location    location? @relation(fields: [location_id], references: [id], onUpdate: NoAction)
  status      status?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  user        user?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model status {
  id            Int        @id @default(autoincrement())
  status        String     @db.VarChar(100)
  auction_list  auction[]
  category_list category[]
  photo_list    photo[]
  user_list     user[]
}

model user {
  id         BigInt     @id @default(autoincrement())
  gmail_id   String?    @db.VarChar(100)
  username   String     @db.VarChar(100)
  email      String     @db.VarChar(100)
  password   String     @db.VarChar(255)
  first_name String     @db.VarChar(100)
  last_name  String     @db.VarChar(100)
  role_id    BigInt?
  status_id  Int?
  is_deleted Boolean
  created_at DateTime   @db.Timestamp(6)
  updated_at DateTime   @db.Timestamp(6)
  tc_identity_no  String?    @db.VarChar(11)
  profile_picture String?
  bid_list   bid[]
  photo_list photo[]
  user_role  user_role? @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  status     status?    @relation(fields: [status_id], references: [id], onUpdate: NoAction)
}

model user_role {
  id        BigInt @id @default(autoincrement())
  role      String @unique @db.VarChar(100)
  user_list user[]
}
